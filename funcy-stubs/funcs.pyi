from functools import partial
from functools import partial as partial
from typing import Any, Callable, Dict, Optional, Tuple, TypeVar, Union

from funcy._inspect import Spec
from funcy.primitives import EmptyType

_Any = TypeVar("_Any")

def autocurry(
    func: Callable,
    _spec: Optional[Spec] = ...,
    _args: Tuple[Any, ...] = ...,
    _kwargs: Dict[str, Any] = ...,
) -> Callable: ...
def caller(*a, **kw) -> Callable: ...
def complement(pred: Callable) -> Callable: ...
def compose(*fs) -> Callable: ...
def constantly(x: _Any) -> Callable[..., _Any]: ...
def curry(func: Callable, n: Union[EmptyType, int] = ...) -> Callable: ...
def func_partial(func: Callable, *args, **kwargs) -> Callable: ...
def identity(x: _Any) -> _Any: ...
def iffy(pred: Any, action: Any = ..., default: Any = ...) -> Callable: ...
def juxt(*fs) -> Callable: ...
def ljuxt(*fs) -> Callable: ...
def rcompose(*fs) -> Callable: ...
def rcurry(func: Callable, n: Union[EmptyType, int] = ...) -> Callable: ...
def rpartial(func: Callable, *args, **kwargs) -> Callable: ...
