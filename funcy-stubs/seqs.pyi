from itertools import accumulate as accumulate
from itertools import chain as chain
from itertools import count as count
from itertools import cycle as cycle
from itertools import repeat as repeat
from typing import Any, Callable, Iterator, Optional

def repeatedly(f, n=...): ...
def iterate(f, x) -> Iterator: ...
def take(n, seq): ...
def drop(n, seq): ...
def first(seq): ...
def second(seq): ...
def nth(n, seq): ...
def last(seq): ...
def rest(seq): ...
def butlast(seq) -> Iterator: ...
def ilen(seq): ...
def lmap(f, *seqs): ...
def lfilter(pred, seq): ...
def map(f, *seqs): ...
def filter(pred, seq): ...

xmap = map

def lremove(pred, seq): ...
def remove(pred, seq): ...
def lkeep(f, seq=...): ...
def keep(f, seq=...): ...
def without(seq, *items) -> Iterator: ...
def lwithout(seq, *items): ...
def lconcat(*seqs): ...

concat = chain

def lcat(seqs): ...

cat: Callable

def flatten(seq, follow=...) -> Iterator: ...
def lflatten(seq, follow=...): ...
def lmapcat(f, *seqs): ...
def mapcat(f, *seqs): ...
def interleave(*seqs): ...
def interpose(sep, seq): ...
def takewhile(pred, seq=...): ...
def dropwhile(pred, seq=...): ...
def ldistinct(seq, key=...): ...
def distinct(seq, key=...) -> Iterator: ...
def split(pred, seq): ...
def lsplit(pred, seq): ...
def split_at(n, seq): ...
def lsplit_at(n, seq): ...
def split_by(pred, seq): ...
def lsplit_by(pred, seq): ...
def group_by(f, seq): ...
def group_by_keys(get_keys, seq): ...
def group_values(seq): ...
def count_by(f, seq): ...
def count_reps(seq): ...
def partition(n, step, seq=...): ...
def lpartition(n, step, seq=...): ...
def chunks(n, step, seq=...): ...
def lchunks(n, step, seq=...): ...
def partition_by(f, seq) -> Iterator: ...
def lpartition_by(f, seq): ...
def with_prev(seq, fill: Optional[Any] = ...): ...
def with_next(seq, fill: Optional[Any] = ...): ...
def pairwise(seq): ...
def reductions(f, seq, acc=...): ...
def lreductions(f, seq, acc=...): ...
def sums(seq, acc=...): ...
def lsums(seq, acc=...): ...
